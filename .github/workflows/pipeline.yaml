name: Mobile Automation Tests - Appium

on:
  push:
  pull_request:

jobs:
  appium-tests:
    runs-on: ubuntu-latest

    steps:
      # 1. Pega o código
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Configura Java 11
      - name: Set up Java 11
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11

      # 3. Configura Android SDK e emulador
      - name: Set up Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 33
          target: google_apis
          arch: x86_64
          force-avd-creation: true
          emulator-options: "-no-window -no-audio -gpu swiftshader_indirect"

      # 4. Mostra informações do ambiente
      - name: Verify environment
        run: |
          java -version
          adb version
          echo "ANDROID_HOME=$ANDROID_HOME"
          echo "PATH=$PATH"

      # 5. Roda os testes Maven / Appium
      - name: Run Appium Tests
        run: mvn clean test

      # 6. Gera resumo do Maven Surefire / JUnit em Markdown
      - name: Generate GitHub Actions summary
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const surefirePath = 'target/surefire-reports';
            if (!fs.existsSync(surefirePath)) {
              console.log('Nenhum relatório encontrado, pulando summary.');
              return;
            }

            const xml2js = require('xml2js');
            const parser = new xml2js.Parser();
            let summary = '### Appium Test Summary\n\n| Test | Status |\n| --- | --- |\n';

            const files = fs.readdirSync(surefirePath).filter(f => f.endsWith('.xml'));
            for (const file of files) {
              const content = fs.readFileSync(`${surefirePath}/${file}`, 'utf8');
              parser.parseString(content, (err, result) => {
                if (err) return;
                const tests = result.testsuite.testcase || [];
                tests.forEach(t => {
                  const name = t.$.name;
                  const status = t.failure ? 'FAILED' : 'PASSED';
                  summary += `| ${name} | ${status} |\n`;
                });
              });
            }

            github.actions.summary.addRaw(summary).write();
