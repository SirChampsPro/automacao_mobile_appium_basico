name: Mobile Automation Tests - Appium

on:
  push:
  pull_request:

jobs:
  appium-tests:
    runs-on: ubuntu-latest

    env:
      ANDROID_HOME: ${{ runner.temp }}/android-sdk
      PATH: ${{ runner.temp }}/android-sdk/emulator:${{ runner.temp }}/android-sdk/tools:${{ runner.temp }}/android-sdk/tools/bin:${{ runner.temp }}/android-sdk/platform-tools:$PATH

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Java 11
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11

      - name: Install Android SDK command line tools
        run: |
          mkdir -p $ANDROID_HOME
          curl -o sdk-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip sdk-tools.zip -d $ANDROID_HOME
          rm sdk-tools.zip
          yes | $ANDROID_HOME/cmdline-tools/bin/sdkmanager --sdk_root=$ANDROID_HOME --licenses
          $ANDROID_HOME/cmdline-tools/bin/sdkmanager --sdk_root=$ANDROID_HOME "platform-tools" "platforms;android-33" "emulator"

      - name: Create and start emulator
        run: |
          echo "no" | $ANDROID_HOME/cmdline-tools/bin/avdmanager create avd -n test -k "system-images;android-33;google_apis;x86_64" --force
          $ANDROID_HOME/emulator/emulator -avd test -no-window -no-audio -gpu swiftshader_indirect &
          adb wait-for-device
          adb shell input keyevent 82

      - name: Verify environment
        run: |
          java -version
          adb version
          echo $ANDROID_HOME

      - name: Run Appium tests
        run: mvn clean test

      - name: Generate GitHub Actions summary
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const surefirePath = 'target/surefire-reports';
            if (!fs.existsSync(surefirePath)) return;
            const xml2js = require('xml2js');
            const parser = new xml2js.Parser();
            let summary = '### Appium Test Summary\n\n| Test | Status |\n| --- | --- |\n';
            const files = fs.readdirSync(surefirePath).filter(f => f.endsWith('.xml'));
            for (const file of files) {
              const content = fs.readFileSync(`${surefirePath}/${file}`, 'utf8');
              parser.parseString(content, (err, result) => {
                if (err) return;
                const tests = result.testsuite.testcase || [];
                tests.forEach(t => {
                  const name = t.$.name;
                  const status = t.failure ? 'FAILED' : 'PASSED';
                  summary += `| ${name} | ${status} |\n`;
                });
              });
            }
            github.actions.summary.addRaw(summary).write();
