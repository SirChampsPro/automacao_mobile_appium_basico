name: Appium Mobile Tests

on:
  push:
    branches: [main]
  pull_request:

jobs:
  android-appium-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Java 11
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11

      - name: Install Node.js and Appium
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install -g appium

      - name: Run Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 33
          target: google_apis
          arch: x86_64
          force-avd-creation: true
          emulator-options: -no-window -no-audio -gpu swiftshader_indirect
          emulator-boot-timeout: 600
          disable-animations: true
          enable-hw-keyboard: false

      - name: Wait for emulator to boot
        run: |
          adb wait-for-device
          adb shell input keyevent 82

      - name: Run Appium tests
        run: mvn clean test -f appium-tests/pom.xml

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: appium-reports
          path: appium-tests/target/surefire-reports

      - name: Generate GitHub Actions summary
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = 'appium-tests/target/surefire-reports';
            if (!fs.existsSync(path)) {
              console.log('Nenhum relatÃ³rio encontrado, pulando summary.');
              return;
            }
            const files = fs.readdirSync(path).filter(f => f.endsWith('.xml'));
            let summary = "### Appium Tests Summary\n\n| Test | Status |\n| --- | --- |\n";
            files.forEach(file => {
              const content = fs.readFileSync(`${path}/${file}`, 'utf8');
              const testcaseMatches = content.match(/<testcase.*name="(.*?)"/g);
              if (testcaseMatches) {
                testcaseMatches.forEach(tc => {
                  const nameMatch = tc.match(/name="(.*?)"/);
                  const name = nameMatch ? nameMatch[1] : 'unknown';
                  const status = tc.includes('<failure') ? 'failed' : 'passed';
                  summary += `| ${name} | ${status} |\n`;
                });
              }
            });
            github.actions.summary.addRaw(summary).write();
